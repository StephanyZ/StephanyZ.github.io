{"total":7,"pageSize":10,"pageCount":1,"data":[{"title":"C++基础","slug":"cpp-info","date":"2022-01-19T10:10:26.000Z","updated":"2022-01-19T10:27:23.174Z","comments":true,"path":"api/articles/cpp-info.json","excerpt":null,"keywords":"c,c++,核心网,网络,DPDK,vpp,python,shell,go","cover":"/archives/8c82138a/cpp_duotai.jpg","content":"<p>主题：本篇内容是对c++基础概念的理解归纳</p>\n<span id=\"more\"></span>\n<h3 id=\"一-C-的基本概念\"><a href=\"#一-C-的基本概念\" class=\"headerlink\" title=\"一.C++的基本概念\"></a>一.C++的基本概念</h3><p>1.封装<br>2.继承<br>3.多态<br>    多态图描述<br><img src=\"/archives/8c82138a/cpp_duotai.jpg\" alt=\"多态\"><br>    代码层面上理解虚函数表和虚指针</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//virtual.h</span><br><span class=\"line\">#pragma once</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">class virtualBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    virtualBase() &#123;&#125;</span><br><span class=\"line\">    ~virtualBase() &#123;&#125;</span><br><span class=\"line\">    virtual void func1()&#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;virtualBase::func1&quot; &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual void func2()&#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;virtualBase::func1&quot; &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual void func3()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;virtualBase::func3&quot; &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void func4()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;virtualBase::func4 NOT VIRTUAL&quot;&lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int a;</span><br><span class=\"line\">    char b;</span><br><span class=\"line\">    short c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class A:public virtualBase&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    A()&#123;&#125;</span><br><span class=\"line\">    ~A()&#123;&#125;</span><br><span class=\"line\">    virtual void func1()&#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;A::func1&quot;&lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual void func2()&#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;A::func2&quot; &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void func4()&#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;A::func4&quot; &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int c;</span><br><span class=\"line\">    int d;</span><br><span class=\"line\">    char f;</span><br><span class=\"line\">    short e;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//virtal.cpp</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &quot;virtual.h&quot;</span><br><span class=\"line\">typedef void(*pfunc)(); </span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    virtualBase *cvb = nullptr;</span><br><span class=\"line\">    cout &lt;&lt; &quot;[INIT] virtualBase *cvb = &quot; &lt;&lt; cvb&lt;&lt; endl;</span><br><span class=\"line\">    A ca;</span><br><span class=\"line\">    printf( &quot;[INIT] A ca ,&amp;ca = %p\\n&quot;, &amp;ca);</span><br><span class=\"line\">    cvb = &amp;ca;</span><br><span class=\"line\">    printf( &quot;[MODY] cvb = &amp;ca, cvb = %p\\n&quot;, cvb);</span><br><span class=\"line\">    cvb-&gt;func1();</span><br><span class=\"line\">    cout&lt;&lt; &quot;[PRIF] A::func1(), cvb =&quot; &lt;&lt; (long*)cvb &lt;&lt; endl;</span><br><span class=\"line\">    cout&lt;&lt; &quot;[PRIF] A::func1(), cvbFunc1 =&quot; &lt;&lt; (long*)*(long*)cvb &lt;&lt; endl;</span><br><span class=\"line\">    cout&lt;&lt; &quot;[PRIF] A::func1(), cvbFunc1 pfunc =&quot; &lt;&lt; (pfunc *)*(long*)cvb &lt;&lt; endl;</span><br><span class=\"line\">    pfunc* f1 = (pfunc*)*(long*)cvb;</span><br><span class=\"line\">    cout &lt;&lt;&quot;ptr:&quot;&lt;&lt;(long*)*(long *)cvb&lt;&lt; &quot;  f1:&quot;&lt;&lt; f1&lt;&lt; &quot; *f1:&quot; &lt;&lt; *f1&lt;&lt;&quot;--&gt;&quot;;</span><br><span class=\"line\">    (*f1)();</span><br><span class=\"line\">    cout &lt;&lt; &quot;=======================&quot;&lt;&lt; endl;</span><br><span class=\"line\">    pfunc* f2 = (pfunc*)((long*)*(long*)cvb + 1);</span><br><span class=\"line\">    cout &lt;&lt;&quot;ptr:&quot;&lt;&lt;((long*)*(long *)cvb+1)&lt;&lt; &quot;  f2:&quot;&lt;&lt; f2&lt;&lt; &quot; *f2:&quot;&lt;&lt;*f2&lt;&lt;&quot; --&gt;&quot;;</span><br><span class=\"line\">    (*f2)();</span><br><span class=\"line\">    cout &lt;&lt; &quot;=======================&quot;&lt;&lt; endl;</span><br><span class=\"line\">    pfunc* f3 = (pfunc*)((long*)*(long*)cvb + 2);</span><br><span class=\"line\">    cout &lt;&lt;&quot;ptr:&quot;&lt;&lt;((long*)*(long *)cvb+2)&lt;&lt; &quot;  f3:&quot;&lt;&lt; f3&lt;&lt; &quot; *f3:&quot;&lt;&lt;*f3&lt;&lt;&quot; --&gt;&quot;;</span><br><span class=\"line\">    (*f3)();</span><br><span class=\"line\">    cout &lt;&lt; &quot;=======================&quot;&lt;&lt; endl;</span><br><span class=\"line\">    cvb-&gt;func2();</span><br><span class=\"line\">    cout&lt;&lt; &quot;[PRIF] A::func2(), funcPtr =&quot; &lt;&lt; &amp;A::func2 &lt;&lt; endl;</span><br><span class=\"line\">    cvb-&gt;func3();</span><br><span class=\"line\">    cout&lt;&lt; &quot;[PRIF] A::func3(), funcPtr =&quot; &lt;&lt;&amp;A::func3 &lt;&lt; endl;</span><br><span class=\"line\">    cvb-&gt;func4();</span><br><span class=\"line\">    cout&lt;&lt; &quot;[PRIF] A::func4(), funcPtr =&quot; &lt;&lt;&amp;A::func4 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) p cvb</span><br><span class=\"line\">$1 = (virtualBase *) 0x7ffd64111910</span><br><span class=\"line\">(gdb) p *cvb</span><br><span class=\"line\">$2 = &#123;_vptr.virtualBase = 0x56043d601cf0 &lt;vtable for A+16&gt;, a = 65535, b = 1 &#x27;\\001&#x27;, c = 0&#125;</span><br><span class=\"line\">(gdb) p *(long*)(0x56043d601cf0)</span><br><span class=\"line\">$3 = 94576207467496</span><br><span class=\"line\">(gdb) p (long*)*(long*)(0x56043d601cf0)</span><br><span class=\"line\">$4 = (long *) 0x56043d4013e8 &lt;A::func1()&gt;</span><br><span class=\"line\">(gdb) p (long*)*((long*)(0x56043d601cf0)+1)</span><br><span class=\"line\">$5 = (long *) 0x56043d401420 &lt;A::func2()&gt;</span><br><span class=\"line\">(gdb) p (long*)*((long*)(0x56043d601cf0)+2)</span><br><span class=\"line\">$6 = (long *) 0x56043d401324 &lt;virtualBase::func3()&gt;</span><br><span class=\"line\">(gdb) p (long*)*((long*)(0x56043d601cf0)+3)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二.\"></a>二.</h3>","raw":null,"categories":[{"name":"基础概念","path":"api/categories/基础概念.json"},{"name":"基础概念/面试","path":"api/categories/基础概念/面试.json"}],"tags":[{"name":"cpp","path":"api/tags/cpp.json"},{"name":"多态","path":"api/tags/多态.json"},{"name":"虚函数","path":"api/tags/虚函数.json"},{"name":"virtual","path":"api/tags/virtual.json"},{"name":"虚指针","path":"api/tags/虚指针.json"}]},{"title":"排序算法(三) 冒泡排序","slug":"sort-pop","date":"2022-01-11T12:00:33.000Z","updated":"2022-01-11T12:07:29.919Z","comments":true,"path":"api/articles/sort-pop.json","excerpt":null,"keywords":"c,c++,核心网,网络,DPDK,vpp,python,shell,go","cover":null,"content":"","raw":null,"categories":[{"name":"算法","path":"api/categories/算法.json"},{"name":"算法/排序","path":"api/categories/算法/排序.json"}],"tags":[{"name":"c","path":"api/tags/c.json"},{"name":"冒泡排序","path":"api/tags/冒泡排序.json"}]},{"title":"排序算法(二) 插入排序","slug":"sort-insert","date":"2022-01-11T12:00:26.000Z","updated":"2022-01-11T12:07:26.323Z","comments":true,"path":"api/articles/sort-insert.json","excerpt":null,"keywords":"c,c++,核心网,网络,DPDK,vpp,python,shell,go","cover":null,"content":"","raw":null,"categories":[{"name":"算法","path":"api/categories/算法.json"},{"name":"算法/排序","path":"api/categories/算法/排序.json"}],"tags":[{"name":"插入排序","path":"api/tags/插入排序.json"},{"name":"c","path":"api/tags/c.json"}]},{"title":"排序算法(一) 快速排序","slug":"sort-quick","date":"2022-01-11T11:59:52.000Z","updated":"2022-01-13T06:53:56.283Z","comments":true,"path":"api/articles/sort-quick.json","excerpt":null,"keywords":"c,c++,核心网,网络,DPDK,vpp,python,shell,go","cover":"/archives/7f40812c/sort_quick.jpg","content":"<p>主题: 快速排序方法和图撕代码</p>\n<span id=\"more\"></span>\n<h2 id=\"一-快速排序流程\"><a href=\"#一-快速排序流程\" class=\"headerlink\" title=\"一. 快速排序流程\"></a>一. 快速排序流程</h2><p>1.首先设定一个分界值，通过该分界值将数组分成左右两部分【本篇分界值key取的是排序数组arr[low],如果要追求尽可能均分，可以取arr[low],arr[high]和arr[(low+high)/2]中中间的一个;<br>2.将大于等于分界值key的数据集中到数组右侧，小于分界值key的集中到数组左侧;<br>3.递归对左边和右边的数据按步骤1，2再次独立排序;</p>\n<h2 id=\"二-快速排序代码对应图解说明\"><a href=\"#二-快速排序代码对应图解说明\" class=\"headerlink\" title=\"二. 快速排序代码对应图解说明\"></a>二. 快速排序代码对应图解说明</h2><p><img src=\"/archives/7f40812c/sort_quick.jpg\" alt=\"快速排序一次处理图解\"></p>\n<h2 id=\"三-快速排序完整代码\"><a href=\"#三-快速排序完整代码\" class=\"headerlink\" title=\"三. 快速排序完整代码\"></a>三. 快速排序完整代码</h2><p>1.C++</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void quick_sort_mid(vector&lt;int&gt; &amp;arr, int start, int end)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int key = arr[start];</span><br><span class=\"line\">    int low = start;</span><br><span class=\"line\">    int high = end;</span><br><span class=\"line\">    int count = 0;</span><br><span class=\"line\">    while(low &lt; high)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        while(arr[high] &gt;= key &amp;&amp; high &gt; low)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            high--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(arr[high] &lt; key)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            arr[low] = arr[high];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(arr[low] &lt;= key &amp;&amp; high &gt; low)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            low++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(arr[low] &gt; key)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            arr[high] = arr[low];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(low == high)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        arr[low] = key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(low - start &gt;= 2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fast_sort_mid(input, start, low-1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(end - high &gt;= 2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fast_sort_mid(input, high + 1, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//快速排序</span><br><span class=\"line\">void quick_sort(vector&lt;int&gt; &amp;input)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int low = 0; </span><br><span class=\"line\">    int high = input.size()-1;</span><br><span class=\"line\">    quick_sort_mid(input, low, high);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.Go</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//传参数arr是切片类型，此时是引用传递</span><br><span class=\"line\">//拓展: go中 数组[num]int是值传递，若需要引用传数组需要传递指针</span><br><span class=\"line\">func quickSortMid(arr []int,start int, end int)&#123;</span><br><span class=\"line\">\tif(end &lt;= start)&#123;</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    low := start</span><br><span class=\"line\">    high := end</span><br><span class=\"line\">    key := arr[low]</span><br><span class=\"line\">    for(low &lt; high)&#123;</span><br><span class=\"line\">        for(low &lt; high &amp;&amp; arr[high] &gt; key)&#123;</span><br><span class=\"line\">            high--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(low &lt; high)&#123;</span><br><span class=\"line\">            arr[low] = arr[high]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(low &lt; high &amp;&amp; arr[low] &lt; key)&#123;</span><br><span class=\"line\">            low++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(low &lt; high)&#123;</span><br><span class=\"line\">            arr[high] = arr[low]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tif(low == high)&#123;</span><br><span class=\"line\">\t\tarr[low] = key</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfmt.Println(arr)</span><br><span class=\"line\">    quickSortMid(arr,start,low-1)</span><br><span class=\"line\">    quickSortMid(arr,high+1,end)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func quickSort(arr []int)&#123;</span><br><span class=\"line\">    quickSortMid(arr,0, len(arr)-1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","raw":null,"categories":[{"name":"算法","path":"api/categories/算法.json"},{"name":"算法/排序","path":"api/categories/算法/排序.json"}],"tags":[{"name":"快速排序","path":"api/tags/快速排序.json"},{"name":"c","path":"api/tags/c.json"}]},{"title":"Github无法访问问题解决","slug":"github-access-failed","date":"2022-01-10T03:26:35.000Z","updated":"2022-01-10T05:41:05.005Z","comments":true,"path":"api/articles/github-access-failed.json","excerpt":null,"keywords":"c,c++,核心网,网络,DPDK,vpp,python,shell,go","cover":null,"content":"<p>主题: GitHub 访问速度慢的问题甚至加载失败的一种解决方法</p>\n<span id=\"more\"></span>\n<h2 id=\"一-参考文章链接\"><a href=\"#一-参考文章链接\" class=\"headerlink\" title=\"一.参考文章链接\"></a>一.参考文章链接</h2><p><a href=\"https://www.cnblogs.com/xiaodongxier/p/tui-jian-yi-gegithub-guo-nei-fang-wen-jia-su-shen.html\">推荐一个github国内访问加速神器GitHub520</a></p>\n<h2 id=\"二-操作方法\"><a href=\"#二-操作方法\" class=\"headerlink\" title=\"二. 操作方法\"></a>二. 操作方法</h2><ol>\n<li>进入查询网站-&gt; <a href=\"https://ipaddress.com/website/github.community\">域名查询网站</a></li>\n<li>输入github.com,把查到的ip + 域名的对应关系插入到 /etc/hosts 文件末尾【Macos系统对应文件】</li>\n<li>刷新DNS缓存<br> sudo killall -HUP mDNSResponder</li>\n</ol>\n","raw":null,"categories":[{"name":"问题解决","path":"api/categories/问题解决.json"}],"tags":[{"name":"github","path":"api/tags/github.json"},{"name":"网络","path":"api/tags/网络.json"}]},{"title":"Github 配置SSH Key","slug":"ssh-key","date":"2022-01-09T15:37:58.000Z","updated":"2022-01-10T07:11:12.371Z","comments":true,"path":"api/articles/ssh-key.json","excerpt":null,"keywords":"c,c++,核心网,网络,DPDK,vpp,python,shell,go","cover":"/archives/82a73b64/ssh_key_op1.png","content":"<p>主题：本篇内容总结介绍ssh key密钥操作配置，后续免密码登陆访问Github.</p>\n<span id=\"more\"></span>\n<h2 id=\"一-参考链接\"><a href=\"#一-参考链接\" class=\"headerlink\" title=\"一. 参考链接\"></a>一. 参考链接</h2><p><a href=\"https://xiangshuo.blog.csdn.net/article/details/83501204?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link\">1. GitHub如何配置SSH Key(CSDN)</a></p>\n<h2 id=\"二-本地生成ssh公钥\"><a href=\"#二-本地生成ssh公钥\" class=\"headerlink\" title=\"二. 本地生成ssh公钥\"></a>二. 本地生成ssh公钥</h2><ol>\n<li>检查是否配置user.name和user.email，如果没有，则执行以下命令创建 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">检查命令：</span><br><span class=\"line\">$ git config user.name</span><br><span class=\"line\">$ git config user.email</span><br><span class=\"line\"></span><br><span class=\"line\">配置命令:</span><br><span class=\"line\">$ git config --global user.name &quot;StephanyZ&quot;</span><br><span class=\"line\">$ git config --global user.email  &quot;xxxxxxxxxx@qq.com&quot;</span><br></pre></td></tr></table></figure></li>\n<li>检查是否存在ssh key <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls ~/.ssh</span><br><span class=\"line\">(核查显示的文件中有没有id_rsa 和 id_rsa.pub)</span><br></pre></td></tr></table></figure></li>\n<li>若步骤2没有ssh key，则使用如下命令创建（若存在，跳过此步骤） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;xxxxxxxxxx@qq.com&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-添加ssh-key到github\"><a href=\"#三-添加ssh-key到github\" class=\"headerlink\" title=\"三. 添加ssh key到github\"></a>三. 添加ssh key到github</h2></li>\n<li>【github网页】点击Setting -&gt; SSH and GPG keys -&gt; New SSH Key</li>\n<li>【本地】cat ～/.id_rsa.pub 把显示的内容复制到Key栏，Title可以随便取一个名字<br><img src=\"/archives/82a73b64/ssh_key_op1.png\" alt=\"ssh-key\"></li>\n</ol>\n<h2 id=\"四-检查是否成功\"><a href=\"#四-检查是否成功\" class=\"headerlink\" title=\"四. 检查是否成功\"></a>四. 检查是否成功</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ blog ssh -T git@github.com</span><br><span class=\"line\">Hi StephanyZ! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 【出现本行，表示成功】</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","raw":null,"categories":[{"name":"问题解决","path":"api/categories/问题解决.json"}],"tags":[{"name":"github","path":"api/tags/github.json"},{"name":"ssh","path":"api/tags/ssh.json"}]},{"title":"Github + Hexo 搭建个人博客","slug":"hexo_yilia_set","date":"2022-01-09T07:41:43.969Z","updated":"2022-01-11T11:49:48.896Z","comments":true,"path":"api/articles/hexo_yilia_set.json","excerpt":null,"keywords":"c,c++,核心网,网络,DPDK,vpp,python,shell,go","cover":"/archives/4a17b156/github_op1.png","content":"<p>主题：本篇内容是根据网络上的内容及实际操作整理如何通过Github+Hexo搭建自己个人专属博客的方法<br>作用：仅作参考<br>hexo主题：yilia </p>\n<span id=\"more\"></span>\n<p>相关内容:<br>    1. hexo相关软件安装；<br>    2. github相关步骤操作；<br>    3. hexo基本命令说明及yilia主题相关内容配置；<br>    4. ssh密钥配置及网站内容提交。<br>    系统：MACOS-Monterey</p>\n<h2 id=\"一-相关参考链接\"><a href=\"#一-相关参考链接\" class=\"headerlink\" title=\"一. 相关参考链接\"></a>一. 相关参考链接</h2><p><a href=\"https://zhuanlan.zhihu.com/p/26625249\">1. GitHub+Hexo 搭建个人网站详细教程(知乎)</a><br><a href=\"https://blog.csdn.net/dta0502/article/details/89607895\">2. Hexo-Yilia进阶笔记(CSDN)</a><br><a href=\"https://www.jianshu.com/p/aa104ffdf045?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation\">3. Hexo yilia 主题一系列配置和使用的记录(简书)</a><br><a href=\"http://blog.yaogro.cn/archives/ccdc2da1.html\">4. Hexo搭建个人博客：yilia主题配置(七) - 自定义Subnav图标</a><br><br></p>\n<h2 id=\"二-本地软件安装\"><a href=\"#二-本地软件安装\" class=\"headerlink\" title=\"二. 本地软件安装\"></a>二. 本地软件安装</h2><ol>\n<li>js下载安装：<a href=\"https://nodejs.org/en/download/\">Node.js</a>;</li>\n<li>Node.js命令行安装: brew install node ;</li>\n<li>检查Node.js和npm的版本 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br><span class=\"line\">v16.13.1</span><br><span class=\"line\">$ npm -v</span><br><span class=\"line\">8.1.2</span><br></pre></td></tr></table></figure>\n (npm会随Node.js的安装一并安装);</li>\n<li>安装Hexo <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br><span class=\"line\">$ npm i hexo-generator-json-content --save 【网页扩展tag对应插件】</span><br><span class=\"line\">$ npm install hexo-abbrlink --save  【文章绝对路径设置对应插件】</span><br><span class=\"line\">$ npm install hexo-deployer-git --save  【发布到github对应插件】</span><br><span class=\"line\">$ sudo npm install hexo-asset-image 【插入图片对应插件】</span><br><span class=\"line\">$ npm i --save gitalk 【评论gitalk插件】</span><br></pre></td></tr></table></figure>\n<br></li>\n</ol>\n<h2 id=\"三-Github配置操作\"><a href=\"#三-Github配置操作\" class=\"headerlink\" title=\"三. Github配置操作\"></a>三. Github配置操作</h2><ol>\n<li>登入github账户主页（没有的话需要自己创建一个）【如账户名:StephanyZ】</li>\n<li>点击New创建一个新的repository，创建的名字严格按照xxxx.github.io【xxxx为对应的账户名，如StephanyZ.github.io 见下图。 由于之前已经创建好了，所以重复创建会显示报错】<br><img src=\"/archives/4a17b156/github_op1.png\" alt=\"github_op1\"></li>\n<li>创建ssh密钥<br><a href=\"/archives/82a73b64.html\" title=\"Github 配置SSH Key\">Github 配置SSH Key</a>\n<br></li>\n</ol>\n<h2 id=\"四-基本操作命令\"><a href=\"#四-基本操作命令\" class=\"headerlink\" title=\"四. 基本操作命令\"></a>四. 基本操作命令</h2><ol>\n<li>yilia主题下载 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir blog</span><br><span class=\"line\">$ cd blog     【之后所有对hexo命令的操作都在blog文件夹下进行】</span><br><span class=\"line\">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia </span><br></pre></td></tr></table></figure>\n 【tips:<a href=\"/archives/7e0304ed.html\" title=\"Github网站访问失败解决方法\">Github网站访问失败解决方法</a>】</li>\n</ol>\n<ol start=\"2\">\n<li>hexo基本命令 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog  【hexo初始化blog】</span><br><span class=\"line\">$ hexo new new_file_name 【hexo新建一篇博客,可缩写: hexo n new_file_name】</span><br><span class=\"line\">$ hexo generate 【hexo重新生成网页文件,缩写: hexo g】</span><br><span class=\"line\">$ hexo server 【本地启动网页服务预览，缩写:hexo s. 默认是localhost:4000, 使用网页http://localhost:4000访问】</span><br><span class=\"line\">$ hexo deploy 【hexo内容发布到github，缩写:hexo d, 注: 发布之前确保本地已执行了hexo clean,hexo g,对应的github配置见**配置说明1**】</span><br><span class=\"line\">$ hexo clean 【hexo 清除本地网页缓存】</span><br></pre></td></tr></table></figure>\n hexo server 指定参数<br> hexo server 【动态启动: hexo自动检测文件变动，更新本地内容不需重新启动服务器,文件内部配置见<strong>配置说明2</strong>】<br> hexo server -s 【静态启动】<br> hexo server -p 4001 【更改服务端口为4001，默认4000】<br> hexo server -i 192.168.0.1 【更改启动ip，默认127.0.0.1，即localhost】<br></li>\n</ol>\n<h2 id=\"五-hexo对应配置文件配置和yilia主题配置文件配置\"><a href=\"#五-hexo对应配置文件配置和yilia主题配置文件配置\" class=\"headerlink\" title=\"五. hexo对应配置文件配置和yilia主题配置文件配置\"></a>五. hexo对应配置文件配置和yilia主题配置文件配置</h2><p>1.配置说明1: github 配置说明<br>    保证3.3中的ssh密钥已正常配置完成，在blog主目录下的_config.yml中配置如下，<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: git@github.com:StephanyZ/StephanyZ.github.io.git</span><br><span class=\"line\">    branch: main</span><br></pre></td></tr></table></figure><br>2.配置说明2: 启动服务配置说明<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">    port: 4001 #端口号随意，默认是4000</span><br><span class=\"line\">    compress: true</span><br><span class=\"line\">    header: true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"六-md文件编写\"><a href=\"#六-md文件编写\" class=\"headerlink\" title=\"六. md文件编写\"></a>六. md文件编写</h2><p>1.图片加载对应配置及使用<br>    a. 头像加载<br>    1) 拷贝头像图片文件touxiang.jpg到themes/yilia/source/my/img/touxiang.jpg<br>    2）在themes/yilia/_config.yml中配置<br>        <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar: /my/img/yaya.jpg</span><br></pre></td></tr></table></figure><br>    b. 文章图片调用</p>\n<p>2.本地md文件引用说明</p>\n<p>3.tag标签使用说明</p>\n<p><a href=\"http://font.qqe2.com/\">icon字体编辑网站</a></p>\n","raw":null,"categories":[{"name":"环境搭建","path":"api/categories/环境搭建.json"}],"tags":[{"name":"网站","path":"api/tags/网站.json"},{"name":"hexo","path":"api/tags/hexo.json"},{"name":"github","path":"api/tags/github.json"},{"name":"yilla","path":"api/tags/yilla.json"}]}]}